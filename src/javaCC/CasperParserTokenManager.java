package javaCC;/* CasperParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CasperParserTokenManager.java */

/** Token Manager. */
@SuppressWarnings("unused")public class CasperParserTokenManager implements CasperParserConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1000000L) != 0L)
            return 0;
         if ((active0 & 0xebefafafffffcd00L) != 0L || (active1 & 0x2fbfeL) != 0L)
         {
            jjmatchedKind = 84;
            return 9;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x50001L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0xefefafadf6ffcd00L) != 0L || (active1 & 0x3fbc0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 1;
            }
            return 9;
         }
         if ((active0 & 0x209000000L) != 0L || (active1 & 0x3eL) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0x2804000000L) != 0L || (active1 & 0xcL) != 0L)
            return 9;
         if ((active0 & 0xefefaf85f2ffcd00L) != 0L || (active1 & 0x3fbc0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 2;
            }
            return 9;
         }
         return -1;
      case 3:
         if ((active0 & 0xefeeafa4f0ffcd00L) != 0L || (active1 & 0x3fbc0L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 3;
            return 9;
         }
         if ((active0 & 0x1000102000000L) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0xefecafa4d0ffc900L) != 0L || (active1 & 0x3fbc0L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
            return 9;
         }
         if ((active0 & 0x2000020000400L) != 0L)
            return 9;
         return -1;
      case 5:
         if ((active0 & 0x2fecaf84d0ff8900L) != 0L || (active1 & 0x3fb40L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
            return 9;
         }
         if ((active0 & 0xc000002000004000L) != 0L || (active1 & 0x80L) != 0L)
            return 9;
         return -1;
      case 6:
         if ((active0 & 0x2fecaf8450ff8900L) != 0L || (active1 & 0x3fb00L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
            return 9;
         }
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x40L) != 0L)
            return 9;
         return -1;
      case 7:
         if ((active0 & 0x2f0c8f0410ff8900L) != 0L || (active1 & 0x2fb00L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 7;
            }
            return 9;
         }
         if ((active0 & 0xe0208040000000L) != 0L || (active1 & 0x10000L) != 0L)
            return 9;
         return -1;
      case 8:
         if ((active0 & 0x23cc8b0410f68100L) != 0L || (active1 & 0x27800L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 8;
            return 9;
         }
         if ((active0 & 0xc00040000090800L) != 0L || (active1 & 0x8300L) != 0L)
            return 9;
         return -1;
      case 9:
         if ((active0 & 0x23cc830000f68100L) != 0L || (active1 & 0x22800L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 9;
            }
            return 9;
         }
         if ((active0 & 0x80410000000L) != 0L || (active1 & 0x5000L) != 0L)
            return 9;
         return -1;
      case 10:
         if ((active0 & 0x23cc830000f68100L) != 0L || (active1 & 0x23800L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 10;
            return 9;
         }
         return -1;
      case 11:
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x23cc830000f60000L) != 0L || (active1 & 0x23000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 11;
            return 9;
         }
         if ((active0 & 0x8000L) != 0L || (active1 & 0x800L) != 0L)
            return 9;
         return -1;
      case 12:
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x3cc820000f20000L) != 0L || (active1 & 0x23000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 12;
            return 9;
         }
         if ((active0 & 0x2000010000040000L) != 0L)
            return 9;
         return -1;
      case 13:
         if ((active0 & 0x1cc020000620000L) != 0L || (active1 & 0x23000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 13;
            return 9;
         }
         if ((active0 & 0x200800000900000L) != 0L)
            return 9;
         return -1;
      case 14:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 13)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 13;
            }
            return -1;
         }
         if ((active0 & 0x1c8000000620000L) != 0L || (active1 & 0x23000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 14;
            return 9;
         }
         if ((active0 & 0x20000000000L) != 0L)
            return 9;
         return -1;
      case 15:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 14)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 14;
            }
            return -1;
         }
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 13)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 13;
            }
            return -1;
         }
         if ((active0 & 0xc8000000620000L) != 0L || (active1 & 0x21000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 15;
            return 9;
         }
         if ((active1 & 0x2000L) != 0L)
            return 9;
         return -1;
      case 16:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 14)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 14;
            }
            return -1;
         }
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 13)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 13;
            }
            return -1;
         }
         if ((active0 & 0x8000000620000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 16;
            return 9;
         }
         if ((active0 & 0xc0000000000000L) != 0L || (active1 & 0x20000L) != 0L)
            return 9;
         return -1;
      case 17:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 14)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 14;
            }
            return -1;
         }
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 13)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 13;
            }
            return -1;
         }
         if ((active0 & 0x400000L) != 0L || (active1 & 0x1000L) != 0L)
            return 9;
         if ((active0 & 0x8000000220000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 17;
            return 9;
         }
         return -1;
      case 18:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 14)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 14;
            }
            return -1;
         }
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 13)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 13;
            }
            return -1;
         }
         if ((active0 & 0x8000000220000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 18;
            return 9;
         }
         return -1;
      case 19:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 14)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 14;
            }
            return -1;
         }
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 13)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 13;
            }
            return -1;
         }
         if ((active0 & 0x8000000220000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 19;
            return 9;
         }
         return -1;
      case 20:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 14)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 14;
            }
            return -1;
         }
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 13)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 13;
            }
            return -1;
         }
         if ((active0 & 0x8000000200000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 20;
            return 9;
         }
         if ((active0 & 0x20000L) != 0L)
            return 9;
         return -1;
      case 21:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 14)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 14;
            }
            return -1;
         }
         if ((active0 & 0x8000000200000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 21;
            return 9;
         }
         return -1;
      case 22:
         if ((active0 & 0x8000000200000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 22;
            return 9;
         }
         return -1;
      case 23:
         if ((active0 & 0x8000000200000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 23;
            return 9;
         }
         return -1;
      case 24:
         if ((active0 & 0x8000000200000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 24;
            return 9;
         }
         return -1;
      case 25:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 25;
            return 9;
         }
         if ((active0 & 0x200000L) != 0L)
            return 9;
         return -1;
      case 26:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 26;
            return 9;
         }
         return -1;
      case 27:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 27;
            return 9;
         }
         return -1;
      case 28:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 28;
            return 9;
         }
         return -1;
      case 29:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 29;
            return 9;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x1010505000003280L, 0x400L);
      case 37:
         return jjStopAtPos(0, 89);
      case 40:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 41:
         return jjStopAtPos(0, 94);
      case 44:
         return jjStopAtPos(0, 101);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 46:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L);
      case 58:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L);
      case 59:
         return jjStopAtPos(0, 102);
      case 60:
         return jjStopAtPos(0, 99);
      case 61:
         return jjStopAtPos(0, 90);
      case 62:
         return jjStopAtPos(0, 100);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x90000L, 0x0L);
      case 67:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x10000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x80c000000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0xe0030000000100L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x3eL);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x27800L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x20000000000c000L, 0x80c0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x40000f00000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x800000040000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 97);
      case 93:
         return jjStopAtPos(0, 98);
      case 95:
         return jjStopAtPos(0, 107);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2000000004000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2002900000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x100L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000200020000000L, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1000202000000L, 0x0L);
      case 120:
         return jjStartNfaWithStates_0(0, 82, 9);
      case 123:
         return jjStopAtPos(0, 95);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 125:
         return jjStopAtPos(0, 96);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 43:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000L);
      case 45:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      case 46:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         break;
      case 61:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         break;
      case 62:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 70:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 65, 9);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000080L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x1200L, active1, 0L);
      case 82:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2cL);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000002000L, active1, 0x400L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2080000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x400c0000e0044800L, active1, 0x27840L);
      case 102:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 9);
         break;
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000840000f00000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e0030004000500L, active1, 0x100L);
      case 111:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 9);
         return jjMoveStringLiteralDfa2_0(active0, 0x2c00020000L, active1, 0x10000L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 9);
         return jjMoveStringLiteralDfa2_0(active0, 0x401000110000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000008000L, active1, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 41:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(2, 87);
         break;
      case 45:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(2, 69);
         break;
      case 65:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000040000L, active1, 0x18000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000004040004000L, active1, 0L);
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 9);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000012000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0x400L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x240000f00000L, active1, 0x27a00L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c000420020800L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000400L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000002000019280L, active1, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20e0838000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(3, 67);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000002000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x800c078040f12980L, active1, 0x180L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000800000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0x10000L);
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x600L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000009200L, active1, 0x27800L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x40e0000000004000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x802400080000000L, active1, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x10004400000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x10080000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x480000000L, active1, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000100000002200L, active1, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000f00000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x6200000000094080L, active1, 0x10200L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1050000000L, active1, 0x40L);
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000028000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1c038000000900L, active1, 0L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 9);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000001000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1e0084000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x27800L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x900000L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0L);
      case 87:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0c004000000800L, active1, 0x8000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0xe0000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000200L, active1, 0x27800L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x80048000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400002000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L);
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0x400L);
      case 109:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x31000b8000080000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10001000L, active1, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0x10000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 9);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 9);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x140000000000L, active1, 0x300L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x1040000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x5000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x879000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0xc00000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0x10000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x110000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x10e00000404b0100L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x300000000000L, active1, 0x8500L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000800000L, active1, 0L);
      case 109:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(6, 46);
         break;
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000400000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L, active1, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x200c000000000800L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x400080L, active1, 0x5000L);
      case 99:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 45, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L, active1, 0L);
      case 101:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0x1c000000048800L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000080400802000L, active1, 0xa00L);
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0x1c00031000000000L, active1, 0x20000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x210000L, active1, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x200100000001000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000100000L, active1, 0x8000L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0x10080200L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100L);
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa9_0(active0, 0x40010000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0xc000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0x20000L);
      case 99:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 73, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000a000L, active1, 0x2000L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 58, 9);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 59, 9);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 72, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000140300L, active1, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400L);
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x10001000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x100400000000L, active1, 0L);
      case 112:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 9);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000080L, active1, 0L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 9);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 19, 9);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(8, 60);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 79, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x5000L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000800000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000001000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000004000002000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 9);
         return jjMoveStringLiteralDfa10_0(active0, 0x900000L, active1, 0L);
      case 103:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 34, 9);
         break;
      case 104:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x20080L, active1, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L, active1, 0x800L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x40031000200000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x180000000008000L, active1, 0x2000L);
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(9, 9);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(9, 44);
         break;
      case 121:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 28, 9);
         return jjMoveStringLiteralDfa10_0(active0, 0xc000000000100L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000080L, active1, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L, active1, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000048000L, active1, 0x1000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L, active1, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0xc0010000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0xc000000000100L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000800000002000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0x100L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x80L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L, active1, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000001000b21000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x804000002000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x10020000040000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L, active1, 0L);
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(11, 75, 9);
         break;
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(11, 15, 9);
         return jjMoveStringLiteralDfa12_0(active0, 0xc000000000000L, active1, 0x2400L);
      case 119:
         return jjMoveStringLiteralDfa12_0(active0, 0x40010000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(12, 8);
         break;
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000L, active1, 0L);
      case 100:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 61, 9);
         break;
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x8c000000400000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x140000000000080L, active1, 0L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 40, 9);
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L, active1, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x820000002000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000L);
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(12, 36);
         return jjMoveStringLiteralDfa13_0(active0, 0x801000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(12, 18, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20000L);
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 57, 9);
         return jjMoveStringLiteralDfa14_0(active0, 0x140000000400080L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x3000L);
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0xc000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(13, 13);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 47, 9);
         break;
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000000L, active1, 0x400L);
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(13, 23, 9);
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 20, 9);
         return jjMoveStringLiteralDfa14_0(active0, 0x200000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20000L);
      case 70:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x100004000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 41, 9);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000021000L, active1, 0L);
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(14, 7);
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000000000L, active1, 0L);
      case 61:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x80004000420000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1000L);
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(15, 77, 9);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(15, 74);
         break;
      case 118:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000L, active1, 0L);
      case 61:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000000000000L, active1, 0L);
      case 99:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(16, 81, 9);
         break;
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x1000L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 54, 9);
         return jjMoveStringLiteralDfa17_0(active0, 0x220000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(16, 38);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 55, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000000000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000L, active1, 0L);
      case 115:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(17, 76, 9);
         break;
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(17, 22, 9);
         return jjMoveStringLiteralDfa18_0(active0, 0x10000000001000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000000000000L);
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000000020000L);
      case 103:
         return jjMoveStringLiteralDfa19_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000000001000L);
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x10000000001000L);
      case 112:
         return jjMoveStringLiteralDfa20_0(active0, 0x8000000000000L);
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x100000000200000L);
      case 117:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(20, 50);
         return jjMoveStringLiteralDfa21_0(active0, 0x8000000200000L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(20, 12);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(20, 52);
         break;
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(20, 17, 9);
         break;
      case 117:
         return jjMoveStringLiteralDfa21_0(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa22_0(active0, 0x8000000000000L);
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(21, 56);
         return jjMoveStringLiteralDfa22_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa23_0(active0, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa23_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa24_0(active0, 0x8000000000000L);
      case 101:
         return jjMoveStringLiteralDfa24_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa25_0(active0, 0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa25_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
static private int jjMoveStringLiteralDfa25_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa26_0(active0, 0x8000000000000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(25, 21, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
static private int jjMoveStringLiteralDfa26_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa27_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, 0L);
}
static private int jjMoveStringLiteralDfa27_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa28_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, 0L);
}
static private int jjMoveStringLiteralDfa28_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa29_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0, 0L);
}
static private int jjMoveStringLiteralDfa29_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa30_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0, 0L);
}
static private int jjMoveStringLiteralDfa30_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(30, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(29, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                     { jjCheckNAdd(7); }
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 45)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAdd(7); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 9:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAdd(9); }
                  break;
               case 1:
                  { jjAddStates(0, 2); }
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, 
"\43\106\162\145\145\40\166\141\162\151\141\142\154\145\163", "\111\156\166\145\162\163\145\113\145\171\163\40\75", 
"\43\120\162\157\143\145\163\163\145\163", "\153\156\157\167\163", "\147\145\156\145\162\141\164\145\163", 
"\43\120\162\157\164\157\143\157\154\40\144\145\163\143\162\151\160\164\151\157\156", "\43\123\160\145\143\151\146\151\143\141\164\151\157\156", 
"\123\145\143\162\145\164", "\123\164\162\157\156\147\123\145\143\162\145\164", 
"\101\147\162\145\145\155\145\156\164", 
"\116\157\156\111\156\152\145\143\164\151\166\145\101\147\162\145\145\155\145\156\164", "\127\145\141\153\101\147\162\145\145\155\145\156\164", 
"\101\154\151\166\145\156\145\163\163", "\124\151\155\145\144\101\147\162\145\145\155\145\156\164", 
"\124\151\155\145\144\116\157\156\111\156\152\145\143\164\151\166\145\101\147\162\145\145\155\145\156\164", "\124\151\155\145\144\127\145\141\153\101\147\162\145\145\155\145\156\164", 
"\124\151\155\145\144\101\154\151\166\145\156\145\163\163", "\151\146", "\164\150\145\156", "\141\156\144", "\157\162", 
"\160\162\145\166\151\157\165\163\154\171", "\163\145\156\144\163", "\162\145\143\145\151\166\145\163", 
"\155\145\163\163\141\147\145", "\146\162\157\155", "\164\157", "\143\157\156\164\141\151\156\151\156\147", 
"\146\157\162", "\43\105\161\165\151\166\141\154\145\156\143\145\163", 
"\146\157\162\141\154\154", "\43\101\143\164\165\141\154\40\166\141\162\151\141\142\154\145\163", 
"\105\170\164\145\162\156\141\154", "\111\156\164\145\162\156\141\154\113\156\157\167\156", 
"\111\156\164\145\162\156\141\154\125\156\153\156\157\167\156", "\124\151\155\145\123\164\141\155\160", 
"\115\141\170\122\165\156\124\151\155\145", "\43\106\165\156\143\164\151\157\156\163", "\163\171\155\142\157\154\151\143", 
"\43\123\171\163\164\145\155", "\127\151\164\150\144\162\141\167\117\160\164\151\157\156", 
"\164\162\165\145", "\146\141\154\163\145", 
"\107\145\156\145\162\141\164\145\123\171\163\164\145\155\40\75\40\124\162\165\145", 
"\107\145\156\145\162\141\164\145\123\171\163\164\145\155\106\157\162\122\145\160\145\141\164\123\145\143\164\151\157\156\75", 
"\43\111\156\164\162\165\144\145\162\40\111\156\146\157\162\155\141\164\151\157\156", "\111\156\164\162\165\144\145\162", 
"\111\156\164\162\165\144\145\162\113\156\157\167\154\145\144\147\145", "\111\156\164\162\165\144\145\162\120\162\157\143\145\163\163\145\163", 
"\125\156\142\157\165\156\144\120\141\162\141\154\154\145\154\40\75\40\124\162\165\145", "\123\164\141\154\145\113\156\157\167\154\145\144\147\145", 
"\103\162\141\143\153\141\142\154\145", "\107\165\145\163\163\141\142\154\145", "\43\103\150\141\156\156\145\154\163", 
"\141\165\164\150\145\156\164\151\143\141\164\145\144", "\163\145\143\162\145\164", "\144\151\162\145\143\164", "\103", "\116\106", 
"\116\122\101", "\116\122\101\55", "\116\122", "\116\122\55", "\123\145\163\163\151\157\156", 
"\123\164\162\145\141\155", "\151\156\152\145\143\164\151\166\145", 
"\163\171\155\155\145\164\162\151\143", "\43\123\151\155\160\154\151\146\151\143\141\164\151\157\156\163", 
"\122\145\155\157\166\145\106\151\145\154\144\163", "\122\145\155\157\166\145\110\141\163\150\145\144\106\151\145\154\144\163", 
"\122\145\155\157\166\145\105\156\143\162\171\164\160\151\157\156", "\122\145\155\157\166\145\110\141\163\150", 
"\123\167\141\160\120\141\151\162\163", "\103\157\141\154\145\163\143\145", 
"\122\145\155\157\166\145\120\154\141\151\156\101\156\144\105\156\143", "\170", null, null, null, null, "\50\53\51", "\55\76", "\45", "\75", "\41\75", 
"\174\55", "\50", "\51", "\173", "\175", "\133", "\135", "\74", "\76", "\54", "\73", 
"\72", "\56", "6\56", "\72\75", "\137", null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 108)
   {
      jjmatchedKind = 108;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CasperParserTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public CasperParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 10; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0x1fffffffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[10];
    static private final int[] jjstateSet = new int[2 * 10];

    
    static protected char curChar;
}
