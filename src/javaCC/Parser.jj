options{
    IGNORE_CASE = false;
   // DEBUG_PARSER = true;
   STATIC = false;
}

// ** SECTION 2 - USER CODE **
PARSER_BEGIN(CasperParser)
package javaCC;
import model.msg.*;
import model.spec.*;
import model.*;
import java.util.*;
public class CasperParser {


}

PARSER_END(CasperParser)
// ** SECTION 3 - TOKEN DEFINITIONS & SKIPS **


SKIP : {
   // <SINGLE_LINE_COMMENT : "--" (~["\r"])* ("\r") >
    <SINGLE_LINE_COMMENT : "--" (~["\n", "\r"])* ("\r" | "\n" | "\r\n") >
}

SKIP : // IGNORE SPACES, TABS, NEWLINES, FORM FEEDS & CARRIAGE RETURNS
{
            " "
        |   "\t"
        |   "\f"
        |   "\r"
        |   "\n"
}

TOKEN : // KEYWORDS
{
        <FREE_VARS : "#Free variables">
    |   <INVERSE_KEYS : "InverseKeys =">
    |   <PROCESSES : "#Processes">
    |   <KNOWS : "knows">
    |   <GENERATES : "generates">
    |   <PROT_DESC : "#Protocol description">
    |   <SPEC : "#Specification">
    |   <SECRET : "Secret">
    |   <STRONG_SECRET : "StrongSecret">
    |   <AGREEMENT : "Agreement">
    |   <N_I_AGREEMENT : "NonInjectiveAgreement">
    |   <WEAK_AGREEMENT : "WeakAgreement">
    |   <ALIVENESS : "Aliveness">
    |   <TIMED_AGREEMENT : "TimedAgreement">
    |   <TIMED_N_I_AGREEMENT : "TimedNonInjectiveAgreement">
    |   <TIMED_WEAK_AGREEMENT : "TimedWeakAgreement">
    |   <TIMED_ALIVENESS : "TimedAliveness">
    |   <IF : "if">
    |   <THEN : "then">
    |   <AND : "and">
    |   <OR : "or">
    |   <PREV : "previously">
    |   <SENDS : "sends">
    |   <RECEIVES : "receives">
    |   <MESSAGE : "message">
    |   <FROM : "from">
    |   <TO : "to">
    |   <CONTAINING : "containing">
    |   <FOR : "for">
    |   <EQ : "#Equivalences">
    |   <FOR_ALL : "forall">
    |   <ACTUAL_VARS : "#Actual variables">
    |   <EXTERNAL : "External">
    |   <INTERNAL_KNOWN : "InternalKnown">
    |   <INTERNAL_UNKNOWN : "InternalUnknown">
    |   <TIMESTAMP : "TimeStamp">
    |   <MAX_RUN_TIME : "MaxRunTime">
    |   <FUNCS : "#Functions">
    |   <INLINE_FUNCS : "#Inline Functions">
    |   <SYMBOLIC : "symbolic">
    |   <SYSTEM : "#System">
    |   <WITHDRAW_OPTION : "WithdrawOption">
    |   <TRUE : "true">
    |   <FALSE : "false">
    |   <GEN_SYS : "GenerateSystem = True">
    |   <GEN_SYS_F_R_S : "GenerateSystemForRepeatSection=">
    |   <INTRUDER_INFO : "#Intruder Information">
    |   <INTRUDER : "Intruder">
    |   <INTRUDER_KNOWLEDGE : "IntruderKnowledge">
    |   <INTRUDER_PROCESSES : "IntruderProcesses">
    |   <UNBOUND_P : "UnboundParallel = True">
    |   <STALE_KNOWLEDGE : "StaleKnowledge">
    |   <CRACKABLE : "Crackable">
    |   <GUESSABLE : "Guessable">
    |   <CHANNELS : "#Channels">
    |   <AUTH : "authenticated">
    |   <SECRET_LOWER : "secret">
    |   <DIRECT : "direct">
    |   <C : "C">
    |   <NF : "NF">
    |   <NRA : "NRA">
    |   <NRA_MINUS : "NRA-">
    |   <NR : "NR">
    |   <NR_MINUS : "NR-">
    |   <SESSION : "Session">
    |   <STREAM : "Stream">
    |   <INJECTIVE : "injective">
    |   <SYMMETRIC : "symmetric">
    |   <SIMP : "#Simplifications">
    |   <REMOVE_FIELDS : "RemoveFields">
    |   <REMOVE_HASHED_FIELDS : "RemoveHashedFields">
    |   <REMOVE_ENCRYPTION : "RemoveEncrytpion">
    |   <REMOVE_HASH : "RemoveHash">
    |   <SWAP_PAIRS : "SwapPairs">
    |   <COALESCE : "Coalesce">
    |   <REMOVE_PLAIN_AND_ENC : "RemovePlainAndEnc">
    |   <X : "x">
}

TOKEN : {
        <ID : <LETTER> (<LETTER> | <DIGIT>)*>
    |   <LETTER : ["a" - "z","A" - "Z"]>
    |   <DIGIT : ["0" - "9"]>



}

TOKEN : {
        <XOR : "(+)">
    |   <ARROW : "->">
    |   <MOD : "%">
    |   <EQUALS : "=">
    |   <NOT_EQUAL: "!=">
    |   <PIPE_DASH : "|-">
    |   <L_PAREN : "(">
    |   <R_PAREN : ")">
    |   <L_BRACE : "{">
    |   <R_BRACE : "}">
    |   <L_SQUARE : "[">
    |   <R_SQUARE : "]">
    |   <LESS_THAN : "<">
    |   <GREATER_THAN : ">">
    |   <COMMA : ",">
    |   <SEMI_COLON : ";">
    |   <COLON : ":">
    |   <DOT : ".">
    |   <TWO_DOTS : "..">
    |   <ASSIGNMENT : ":=">
    |   <UNDERSCORE : "_">



}
// CATCH ANYTHING ELSE
TOKEN : {
    <OTHER : ~[]>
}

// Grammar Prod Rules

// Basic Def

String atom() : {Token t; String s; } {
        LOOKAHEAD(2) s = fn_app() {return s;}
     |  t = <ID> {return t.image;}
}

String fn_app(): { Token t;StringBuilder builder = new StringBuilder();} {
    t = <ID> {builder.append(t.image);} t = <L_PAREN> {builder.append(t.image);} t = <ID> {builder.append(t.image);} (t = <COMMA> {builder.append(t.image);} t = <ID> {builder.append(t.image);})* t = <R_PAREN> {builder.append(t.image); return builder.toString();}

}

Message msg() : {Token t; Message m; MessageList messagelist;} {
    {messagelist = new MessageList();}
    m = cpt() {messagelist.getMessageList().add(m);} (LOOKAHEAD(2) t = <COMMA> m = cpt() {messagelist.getMessageList().add(m);})* {
        if(messagelist.getMessageList().size() == 1){
            return messagelist.getMessageList().get(0);
        }
        return messagelist;
    }
}

Message cpt() : {Token tok = null; Message m = null; Message t;} {
        LOOKAHEAD(2) tok = <ID> <MOD> t = term() {return new Forward(tok.image, t);}
     |  t = term() [tok = <MOD> m = msgAtom()] {
            if(tok == null){
                return t;
            }
            return new Forward(t.toString(),m);
        }
}

Message term() : {Token t = null; Message atomMessage; Message termMessage = null;} {
    atomMessage = msgAtom() [ t = <XOR> termMessage = term()]   {
        if(t == null){
            return atomMessage;
        }
        return new Xor(atomMessage,termMessage);
    }
}

Message msgAtom() : {Token t; Token t1 = null; Token t2 = null;  Message m = null; Message k;} {
        t = <ID>  [ t1 = <L_PAREN>  m = msg()  t2 = <R_PAREN> ]{
            if(t1 == null){
                return new Atom(t.image);
            }
            if (m instanceof Atom){
                Atom paren = (Atom)m;
                return new Atom(t.image + t1.image + paren.getVarName() + t2.image );
            }
            return new Atom(t.image);
        }

    |   <L_BRACE> m = msg() <R_BRACE> <L_BRACE> k = cpt() <R_BRACE> {
        if(m instanceof MessageList){
            return new Encrypt(k,(MessageList)m);
        }
            MessageList msgList = new MessageList();
            msgList.getMessageList().add(m);
            return new Encrypt(k,msgList);} // Where key = msg & m = messageList
    |   t = <L_PAREN>  m = msg()  t = <R_PAREN>  {return m;}
}
 Token type_name() : {Token t;} {
    t = <ID>
    {return t;}
}

String process_name() : {Token t; } {
    t = <ID>
    {return t.image;}
}

Protocol script() : {Protocol p = new Protocol(); ArrayList<Message> messages = new ArrayList(); ArrayList<Specification> specs = new ArrayList(); Intruder i; ArrayList<Process_> proc;} {
    free_vars()
    proc = processes()
    messages = prot_desc()
    specs = spec_section()
    [equivalences()]
    actual_vars()
    [functions()]
    system()
    i = intruder()
    [channels()] // Optional to fit script example
    <EOF>
    {p.setIntruder(i); p.setMessages(messages); p.setSpecifications(specs); p.setProcesses(proc); return p;}
}

void free_vars() : {} {
    <FREE_VARS>  (var_dec() | inv_keys_dec())*
}

void var_dec() : {} {
    <ID> (<COMMA> <ID>)* <COLON> type_expr()  [subtype_expr()]
}

void subtype_expr() : {} {
    <L_SQUARE> <ID> (<COMMA> <ID>)* <R_SQUARE>
}

void type_expr() : {} {
    type_name() [(<X> type_name())* <ARROW> type_name()]
}

void inv_keys_dec() : {} {
    <INVERSE_KEYS> inv_key_pair() (<COMMA> inv_key_pair())* 
}

void inv_key_pair() : {} {
    <L_PAREN> <ID> <COMMA> <ID> <R_PAREN>
}

ArrayList<Process_> processes() : {ArrayList<Process_> processes = new ArrayList(); Process_ p;} {
    <PROCESSES> (p = process_def() {processes.add(p);})*
    {return processes;}
}

Process_ process_def() : {Token t; String name = null; Process_ process = new Process_(); ArrayList<String> params = new ArrayList();} {
    name = process_name() <L_PAREN> t = <ID> {params.add(t.image);} (<COMMA> t = <ID> {params.add(t.image);} )* <R_PAREN> [knows_stmt()] [gen_stmt()]
    { process.setName(name); process.setParams(params);return process;}
}
void knows_stmt() : {} {
    <KNOWS> atom() (<COMMA> atom())*
}

void gen_stmt() : {} {
    <GENERATES> <ID> (<COMMA> <ID>)*
}

ArrayList<Message> prot_desc() : {ArrayList<Message> messages = new ArrayList(); Message m;} {
        <PROT_DESC> (LOOKAHEAD(3) m = prot_msg() {messages.add(m);}
    |   LOOKAHEAD(3) m = env_msg_send() {messages.add(m);}
    |   m = env_msg_rec() {messages.add(m);} )*
    {return messages;}

}

Message prot_msg() : {Token s; Token r; Message m = null;} {
    [assignment_line() ]
     line_no() <DOT> s = <ID> <ARROW> r = <ID> <COLON>  m = msg(){m.setSenderId(s.image); m.setReceiverId(r.image);}
    [test_line() ]
    {return m;}

}

void assignment_line() : {} {
    <LESS_THAN> assignment() (<SEMI_COLON> assignment())* <GREATER_THAN>
}

void assignment() : {} {
    <ID> <ASSIGNMENT> fdr_expr()
}

void test_line() : {} {
    <L_SQUARE> test() <R_SQUARE>
}

void test() : {} {
   fdr_expr()
}

void fdr_expr() : {} {
  (<EQUALS> | <NOT_EQUAL>| atom())*
}

Message env_msg_send() : {Token t; Message m = null;} {
    line_no() <DOT> <ARROW> t = <ID> <COLON>  m = msg() {m.setReceiverId(t.image);}
    [test_line()]
    {return m;}

}

Message env_msg_rec() : {Token t; Message m = null; } {
    [assignment_line() ]
    line_no() <DOT>  t = <ID> <ARROW> <COLON> m = msg() {m.setSenderId(t.image);}
    {return m;}
}

void line_no(): {}{
    (<DIGIT>) (LOOKAHEAD(3)<DIGIT>| <ID>)*
}

ArrayList<Specification> spec_section() : {ArrayList<Specification> specifications = new ArrayList(); Specification s;} { // TODO handle temoral specs
    <SPEC>  ( s = spec(){specifications.add(s);} | temporal_spec())*
    {return specifications;}
}

Specification spec() : {Token t; Token t1; String atom; ArrayList<String> agents; ArrayList fields; int time;} {
        <SECRET> <L_PAREN> t = <ID> <COMMA> atom = atom() <COMMA> agents = agents() <R_PAREN>{return new Secret(t.image,atom,agents);}
    |   <STRONG_SECRET> <L_PAREN> t = <ID> <COMMA> atom = atom() <COMMA> agents = agents() <R_PAREN>{return new StrongSecret(t.image,atom,agents);}
    |   <AGREEMENT> <L_PAREN> t = <ID> <COMMA> t1 = <ID> <COMMA> fields = fields() <R_PAREN> {return new Agreement(t.image,t1.image,fields);}
    |   <N_I_AGREEMENT> <L_PAREN> t = <ID> <COMMA> t1 = <ID> <COMMA> fields = fields() <R_PAREN> {return new NonInjectiveAgreement(t.image,t1.image,fields);}
    |   <WEAK_AGREEMENT> <L_PAREN> t = <ID> <COMMA> t1 =<ID> <R_PAREN>{return new WeakAgreement(t.image,t1.image);}
    |   <ALIVENESS> <L_PAREN> t = <ID> <COMMA> t1 = <ID> <R_PAREN> {return new Aliveness(t.image,t1.image);}
    |   <TIMED_AGREEMENT> <L_PAREN> t = <ID> <COMMA> t1 = <ID> <COMMA> time = time() <COMMA> fields = fields() <R_PAREN> {return new TimedAgreement(t.image,t1.image,time,fields);}
    |   <TIMED_N_I_AGREEMENT> <L_PAREN> t = <ID> <COMMA> t1 = <ID> <COMMA> time = time() <COMMA> fields = fields() <R_PAREN> {return new TimedNonInjectiveAgreement(t.image,t1.image, time, fields);}
    |   <TIMED_WEAK_AGREEMENT> <L_PAREN> t = <ID> <COMMA> t1 = <ID> <COMMA> time = time() <R_PAREN> {return new TimedWeakAgreement(t.image,t1.image, time);}
    |   <TIMED_ALIVENESS> <L_PAREN> t = <ID> <COMMA> t1 = <ID> <COMMA> time = time() <R_PAREN> {return new TimedAliveness(t.image,t1.image, time);}

}

ArrayList<String> agents() : {Token t;ArrayList<String> agents = new ArrayList();} {
    <L_SQUARE> t = <ID> {agents.add(t.image);} (<COMMA> t = <ID> {agents.add(t.image);})* <R_SQUARE>
    {return agents;}
}

ArrayList<String> fields() : {Token t; ArrayList<String> fields = new ArrayList();} {
    <L_SQUARE> [t = <ID> {fields.add(t.image);} (<COMMA> t = <ID> {fields.add(t.image);})*] <R_SQUARE>
    {return fields;}
}

// TODO Change to N
int time() : {Token t;} {
    t = <DIGIT>
    {return Integer.parseInt(t.image);}
}

void temporal_spec() : {} {
    <IF> temporal_formula() <THEN> temporal_formula()
}

void temporal_formula() : {} {
        <L_PAREN> temporal_formula() <R_PAREN> temporal_formulaP()
    |   temporal_event() temporal_formulaP()
    |   <PREV> temporal_formula() temporal_formulaP()
}

void temporal_formulaP() : {} {
        <AND> temporal_formula() temporal_formulaP()
    |   <OR> temporal_formula() temporal_formulaP()
    |   {}
}

void temporal_event() : {} {
    <ID> (<SENDS> | <RECEIVES>) <MESSAGE>
    line_no() [(<FROM> | <TO>) <ID>]
    [<CONTAINING> sub() (<COMMA> sub())]
}

void sub() : {} {
    <ID> subP()
}

void subP() : {} {
    <FOR> <ID> | {}
}

void equivalences() : {} {
    <EQ>  (equiv_dec())*
}

void equiv_dec() : {} {
    <FOR_ALL> quants() <DOT> msg() <EQUALS> msg() 
}

void quants() : {} {
    quant() (<COMMA> quant())*
}

void quant() : {} {
    <ID> (LOOKAHEAD(2)<COMMA> <ID>)* [<COLON> type_name()]
}

void actual_vars() : {} {
    <ACTUAL_VARS>  (act_dec())*
}

void act_dec() : {} {
        act_var_dec()
    |   timestamp_def()
    |   maxruntime_def()
    |   act_inv_keys_dec()
}

void act_var_dec() : {} {
    <ID> (<COMMA> <ID>)* <COLON> type_name() [di_tag()] [subtype_expr()] 
}

void di_tag() : {} {
        <EXTERNAL>
    |   <INTERNAL_KNOWN>
    |   <INTERNAL_UNKNOWN>
}

void timestamp_def() : {} {
    <TIMESTAMP> <EQUALS> time() <TWO_DOTS> time() 
}

void maxruntime_def() : {} {
    <MAX_RUN_TIME> <EQUALS> time() 
}

void act_inv_keys_dec() : {} {
    <INVERSE_KEYS> act_inv_key_pair() (<COMMA> act_inv_key_pair())*
}

void act_inv_key_pair() : {} {
    <L_PAREN> <ID> <COMMA> <ID> <R_PAREN>
}

void functions() : {} {
    (<FUNCS> | <INLINE_FUNCS>)  (functions_line())*
}

void functions_line() : {} {
        explicit_function_line()
    |   symbolic_line()
}

void explicit_function_line() : {} {
    fn_def_lhs() <EQUALS> <ID> 
}

void fn_def_lhs() : {} {
    <ID> <L_PAREN> fn_def_arg() (<COMMA> fn_def_arg())* <R_PAREN>
}

void fn_def_arg() : {} {
    <ID> | <UNDERSCORE>
}

void symbolic_line() : {} {
    <SYMBOLIC> <ID> (<COMMA> <ID>)* 
}

void system() : {} {
    <SYSTEM> (agent_dec())*
    [withdraw_dec()]
    [generate_system()]
}

void agent_dec() : {} {
    instance_dec() (<SEMI_COLON> instance_dec())* 
}

void instance_dec() : {} {
    process_name() <L_PAREN> <ID> (<COMMA> <ID>)* <R_PAREN>
}

void withdraw_dec() : {} {
    <WITHDRAW_OPTION> <EQUALS> (<TRUE> | <FALSE>) 
}

void generate_system() : {} {
    <GEN_SYS> | <GEN_SYS_F_R_S> line_no() <TO> line_no()
}

Intruder intruder() : {Token t; String s; Intruder intruder = new Intruder(); ArrayList<String> intruderKnowledge = new ArrayList();} {
    <INTRUDER_INFO>
    <INTRUDER> <EQUALS> t = <ID> {intruder.setId(t.image);}
    <INTRUDER_KNOWLEDGE> <EQUALS> <L_BRACE>  s = atom() {intruderKnowledge.add(s);} (<COMMA> s = atom() {intruderKnowledge.add(s);})* <R_BRACE> {intruder.setKnowledge(intruderKnowledge);}
    [internal_proc_dec()]
    [stale_knowledge_dec()]
    [crackable_dec()]
    [guessable_dec()]
    [<UNBOUND_P>]
    (deduction())*
    {return intruder;}
}

void deduction() : {} {
    <FOR_ALL> quants() <DOT> msg() (<COMMA> msg())* <PIPE_DASH> msg() 
}

void internal_proc_dec() : {} {
    <INTRUDER_PROCESSES> <EQUALS> process_name() (<COMMA> process_name())* 
}

Token stale_knowledge_dec() : {Token t;} {
    <STALE_KNOWLEDGE> <EQUALS> (t = <TRUE> | t = <FALSE>){return t;}
}

void crackable_dec() : {} {
    <CRACKABLE> <EQUALS> crackable_type() (<COMMA> crackable_type())* 
}

void crackable_type() : {} {
    type_name() [<L_PAREN> time() <R_PAREN>]
}

void guessable_dec() : {} {
    <GUESSABLE> <EQUALS> type_name() (<COMMA> type_name())* 
}

void channels() : {} {
    <CHANNELS>  (old_channel_spec() | channel_spec())*
}

void old_channel_spec() : {} {
        <AUTH> 
    |   <SECRET> 
    |   <DIRECT> 
}

void channel_spec() : {} {
        msg_channel_spec()
    |   session_channel_spec()
}

void msg_channel_spec() : {} {
    line_no() msg_channel_prop()
}

void msg_channel_prop() : {} {
    [<C>] [<NF>] [(<NRA> | <NRA_MINUS>)] [(<NR> | <NR_MINUS>)]
}

void session_channel_spec() : {} {
    (<SESSION> | <STREAM>) [(<INJECTIVE> | <SYMMETRIC>)] line_no() (<COMMA> line_no())*
}




