/* Generated By:JavaCC: Do not edit this line. CasperParserConstants.java */
package javaCC;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CasperParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 1;
  /** RegularExpression Id. */
  int FREE_VARS = 7;
  /** RegularExpression Id. */
  int INVERSE_KEYS = 8;
  /** RegularExpression Id. */
  int PROCESSES = 9;
  /** RegularExpression Id. */
  int KNOWS = 10;
  /** RegularExpression Id. */
  int GENERATES = 11;
  /** RegularExpression Id. */
  int PROT_DESC = 12;
  /** RegularExpression Id. */
  int SPEC = 13;
  /** RegularExpression Id. */
  int SECRET = 14;
  /** RegularExpression Id. */
  int STRONG_SECRET = 15;
  /** RegularExpression Id. */
  int AGREEMENT = 16;
  /** RegularExpression Id. */
  int N_I_AGREEMENT = 17;
  /** RegularExpression Id. */
  int WEAK_AGREEMENT = 18;
  /** RegularExpression Id. */
  int ALIVENESS = 19;
  /** RegularExpression Id. */
  int TIMED_AGREEMENT = 20;
  /** RegularExpression Id. */
  int TIMED_N_I_AGREEMENT = 21;
  /** RegularExpression Id. */
  int TIMED_WEAK_AGREEMENT = 22;
  /** RegularExpression Id. */
  int TIMED_ALIVENESS = 23;
  /** RegularExpression Id. */
  int IF = 24;
  /** RegularExpression Id. */
  int THEN = 25;
  /** RegularExpression Id. */
  int AND = 26;
  /** RegularExpression Id. */
  int OR = 27;
  /** RegularExpression Id. */
  int PREV = 28;
  /** RegularExpression Id. */
  int SENDS = 29;
  /** RegularExpression Id. */
  int RECEIVES = 30;
  /** RegularExpression Id. */
  int MESSAGE = 31;
  /** RegularExpression Id. */
  int FROM = 32;
  /** RegularExpression Id. */
  int TO = 33;
  /** RegularExpression Id. */
  int CONTAINING = 34;
  /** RegularExpression Id. */
  int FOR = 35;
  /** RegularExpression Id. */
  int EQ = 36;
  /** RegularExpression Id. */
  int FOR_ALL = 37;
  /** RegularExpression Id. */
  int ACTUAL_VARS = 38;
  /** RegularExpression Id. */
  int EXTERNAL = 39;
  /** RegularExpression Id. */
  int INTERNAL_KNOWN = 40;
  /** RegularExpression Id. */
  int INTERNAL_UNKNOWN = 41;
  /** RegularExpression Id. */
  int TIMESTAMP = 42;
  /** RegularExpression Id. */
  int MAX_RUN_TIME = 43;
  /** RegularExpression Id. */
  int FUNCS = 44;
  /** RegularExpression Id. */
  int SYMBOLIC = 45;
  /** RegularExpression Id. */
  int SYSTEM = 46;
  /** RegularExpression Id. */
  int WITHDRAW_OPTION = 47;
  /** RegularExpression Id. */
  int TRUE = 48;
  /** RegularExpression Id. */
  int FALSE = 49;
  /** RegularExpression Id. */
  int GEN_SYS = 50;
  /** RegularExpression Id. */
  int GEN_SYS_F_R_S = 51;
  /** RegularExpression Id. */
  int INTRUDER_INFO = 52;
  /** RegularExpression Id. */
  int INTRUDER = 53;
  /** RegularExpression Id. */
  int INTRUDER_KNOWLEDGE = 54;
  /** RegularExpression Id. */
  int INTRUDER_PROCESSES = 55;
  /** RegularExpression Id. */
  int UNBOUND_P = 56;
  /** RegularExpression Id. */
  int STALE_KNOWLEDGE = 57;
  /** RegularExpression Id. */
  int CRACKABLE = 58;
  /** RegularExpression Id. */
  int GUESSABLE = 59;
  /** RegularExpression Id. */
  int CHANNELS = 60;
  /** RegularExpression Id. */
  int AUTH = 61;
  /** RegularExpression Id. */
  int SECRET_LOWER = 62;
  /** RegularExpression Id. */
  int DIRECT = 63;
  /** RegularExpression Id. */
  int C = 64;
  /** RegularExpression Id. */
  int NF = 65;
  /** RegularExpression Id. */
  int NRA = 66;
  /** RegularExpression Id. */
  int NRA_MINUS = 67;
  /** RegularExpression Id. */
  int NR = 68;
  /** RegularExpression Id. */
  int NR_MINUS = 69;
  /** RegularExpression Id. */
  int SESSION = 70;
  /** RegularExpression Id. */
  int STREAM = 71;
  /** RegularExpression Id. */
  int INJECTIVE = 72;
  /** RegularExpression Id. */
  int SYMMETRIC = 73;
  /** RegularExpression Id. */
  int SIMP = 74;
  /** RegularExpression Id. */
  int REMOVE_FIELDS = 75;
  /** RegularExpression Id. */
  int REMOVE_HASHED_FIELDS = 76;
  /** RegularExpression Id. */
  int REMOVE_ENCRYPTION = 77;
  /** RegularExpression Id. */
  int REMOVE_HASH = 78;
  /** RegularExpression Id. */
  int SWAP_PAIRS = 79;
  /** RegularExpression Id. */
  int COALESCE = 80;
  /** RegularExpression Id. */
  int REMOVE_PLAIN_AND_ENC = 81;
  /** RegularExpression Id. */
  int X = 82;
  /** RegularExpression Id. */
  int LINE_NO = 83;
  /** RegularExpression Id. */
  int ID = 84;
  /** RegularExpression Id. */
  int DIGIT = 85;
  /** RegularExpression Id. */
  int LETTER = 86;
  /** RegularExpression Id. */
  int XOR = 87;
  /** RegularExpression Id. */
  int ARROW = 88;
  /** RegularExpression Id. */
  int MOD = 89;
  /** RegularExpression Id. */
  int EQUALS = 90;
  /** RegularExpression Id. */
  int NOT_EQUAL = 91;
  /** RegularExpression Id. */
  int PIPE_DASH = 92;
  /** RegularExpression Id. */
  int L_PAREN = 93;
  /** RegularExpression Id. */
  int R_PAREN = 94;
  /** RegularExpression Id. */
  int L_BRACE = 95;
  /** RegularExpression Id. */
  int R_BRACE = 96;
  /** RegularExpression Id. */
  int L_SQUARE = 97;
  /** RegularExpression Id. */
  int R_SQUARE = 98;
  /** RegularExpression Id. */
  int LESS_THAN = 99;
  /** RegularExpression Id. */
  int GREATER_THAN = 100;
  /** RegularExpression Id. */
  int COMMA = 101;
  /** RegularExpression Id. */
  int SEMI_COLON = 102;
  /** RegularExpression Id. */
  int COLON = 103;
  /** RegularExpression Id. */
  int DOT = 104;
  /** RegularExpression Id. */
  int TWO_DOTS = 105;
  /** RegularExpression Id. */
  int ASSIGNMENT = 106;
  /** RegularExpression Id. */
  int UNDERSCORE = 107;
  /** RegularExpression Id. */
  int OTHER = 108;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<SINGLE_LINE_COMMENT>",
    "\" \"",
    "\"\\t\"",
    "\"\\f\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"#Free variables\"",
    "\"InverseKeys =\"",
    "\"#Processes\"",
    "\"knows\"",
    "\"generates\"",
    "\"#Protocol description\"",
    "\"#Specification\"",
    "\"Secret\"",
    "\"StrongSecret\"",
    "\"Agreement\"",
    "\"NonInjectiveAgreement\"",
    "\"WeakAgreement\"",
    "\"Aliveness\"",
    "\"TimedAgreement\"",
    "\"TimedNonInjectiveAgreement\"",
    "\"TimedWeakAgreement\"",
    "\"TimedAliveness\"",
    "\"if\"",
    "\"then\"",
    "\"and\"",
    "\"or\"",
    "\"previously\"",
    "\"sends\"",
    "\"receives\"",
    "\"message\"",
    "\"from\"",
    "\"to\"",
    "\"containing\"",
    "\"for\"",
    "\"#Equivalences\"",
    "\"forall\"",
    "\"#Actual variables\"",
    "\"External\"",
    "\"InternalKnown\"",
    "\"InternalUnknown\"",
    "\"TimeStamp\"",
    "\"MaxRunTime\"",
    "\"#Functions\"",
    "\"symbolic\"",
    "\"#System\"",
    "\"WithdrawOption\"",
    "\"true\"",
    "\"false\"",
    "\"GenerateSystem = True\"",
    "\"GenerateSystemForRepeatSection=\"",
    "\"#Intruder Information\"",
    "\"Intruder\"",
    "\"IntruderKnowledge\"",
    "\"IntruderProcesses\"",
    "\"UnboundParallel = True\"",
    "\"StaleKnowledge\"",
    "\"Crackable\"",
    "\"Guessable\"",
    "\"#Channels\"",
    "\"authenticated\"",
    "\"secret\"",
    "\"direct\"",
    "\"C\"",
    "\"NF\"",
    "\"NRA\"",
    "\"NRA-\"",
    "\"NR\"",
    "\"NR-\"",
    "\"Session\"",
    "\"Stream\"",
    "\"injective\"",
    "\"symmetric\"",
    "\"#Simplifications\"",
    "\"RemoveFields\"",
    "\"RemoveHashedFields\"",
    "\"RemoveEncrytpion\"",
    "\"RemoveHash\"",
    "\"SwapPairs\"",
    "\"Coalesce\"",
    "\"RemovePlainAndEnc\"",
    "\"x\"",
    "<LINE_NO>",
    "<ID>",
    "<DIGIT>",
    "<LETTER>",
    "\"(+)\"",
    "\"->\"",
    "\"%\"",
    "\"=\"",
    "\"!=\"",
    "\"|-\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"<\"",
    "\">\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\".\"",
    "\"..\"",
    "\":=\"",
    "\"_\"",
    "<OTHER>",
  };

}
